-- Hack-assembly snippet templates
local constants = require "constants"

-- Promote these constants into global scope, for ease of use.
for key in pairs(constants) do
	_G[key] = constants[key]
end


-- Use global variables, to avoid naming conflicts with local variables
-- These will appear throughout the file with their '_G.' prefix.
_G.filename = ""
_G.fn_name = ""
_G.index = 0

-- Factor out some repeated computations (DRY)
-- cargo: a way to identify the segment to be used, and possibly the register (LCL, etc.)
local mt_static_segment = {
	__index = function (cargo, arg)
		local register = "~L".."."..arg
		return string.format(cargo.snippet, register)
	end
}

local mt_pointer_segment = {
	__index = function (cargo, arg)
		local register = (arg == "0" and "THIS") or (arg == "1" and "THAT")
		return string.format(cargo.snippet, register)
	end
}

local mt_temp_segment = {
	__index = function (cargo, arg)
		local register = "R"..tostring(tonumber(arg))
		return string.format(cargo.snippet, register)
	end
}

local mt_variable_segment = {
	__index = function (cargo, arg)
		return string.format(cargo.snippet, arg, cargo.register)
	end
}


local commands = {
	push = {
		-- constant segment
		constant = setmetatable({}, {__index = function (_, arg)
			return string.format(PUSH_CONSTANT, arg)
		end}),

		-- fixed segments (static, pointer, temp)
		static = setmetatable({snippet=PUSH_FIXED}, mt_static_segment),
		pointer = setmetatable({snippet=PUSH_FIXED}, mt_pointer_segment),
		temp = setmetatable({snippet=PUSH_FIXED}, mt_temp_segment),

		-- variable segments (local, argument, this, that)
		["local"] = setmetatable({snippet=PUSH_VARIABLE, register="LCL"},
			mt_variable_segment),
		argument = setmetatable({snippet=PUSH_VARIABLE, register="ARG"},
			mt_variable_segment),
		this = setmetatable({snippet=PUSH_VARIABLE, register="THIS"},
			mt_variable_segment),
		that = setmetatable({snippet=PUSH_VARIABLE, register="THAT"},
			mt_variable_segment),
	},

	pop = {
		-- fixed segments (static, pointer, temp)
		static = setmetatable({snippet=POP_FIXED}, mt_static_segment),
		pointer = setmetatable({snippet=POP_FIXED}, mt_pointer_segment),
		temp = setmetatable({snippet=POP_FIXED}, mt_temp_segment),

		-- variable segments (local, argument, this, that)
		["local"]
			= setmetatable({snippet=POP_VARIABLE, register="LCL"}, mt_variable_segment),
		argument
			= setmetatable({snippet=POP_VARIABLE, register="ARG"}, mt_variable_segment),
		this
			= setmetatable({snippet=POP_VARIABLE, register="THIS"}, mt_variable_segment),
		that
			= setmetatable({snippet=POP_VARIABLE, register="THAT"}, mt_variable_segment),
	},

	-- Arithmetic and logic commands
	add = ADD,
	["and"] = AND,
	["or"] = OR,
	neg = NEG,
	sub = SUB,
	["not"] = NOT,

	["function"] = setmetatable({}, {__index = function (_, fn_name)
		_G.fn_name = fn_name

		return setmetatable({}, {__index = function (_, nlocals)
			return FUNCTION:format(fn_name, nlocals, fn_name, fn_name,
				 fn_name, fn_name)
		end})
	end}),

	call = setmetatable({}, {__index = function (_, fn_name)
		return setmetatable({}, {__index = function (_, nargs)
			_G.index = _G.index + 1
			return CALL:format(fn_name, _G.index, fn_name, fn_name, _G.index)
		end})
	end}),
}

local hooks = setmetatable(commands, {__index = function (_, cmd)
	local comparison_ops = {
		["eq"] = EQ,
		["lt"] = LT,
		["gt"] = GT
	}

	_G.index = _G.index + 1

	return string.format(comparison_ops[cmd], _G.fn_name, _G.index,
		_G.fn_name, _G.index)
end})


-- Gets used more than once at different levels, so isolate into a function.
local function extract_filename (filepath)
		local basename = filepath:gsub(".*/", "")
		local filename = basename:match("[^.]+")

		return filename
end

local function metadata ()
	local function emit (line)
		line = line:gsub("//.*", "")

		-- If line is empty, or all whitespace, skip
		if line:match("^%s*$") then
			return false
		end

		local result = commands

		local asm_comment = "// "
		for token in line:gmatch(VMCOMMAND_PATTERN) do
			result = result[token]
			asm_comment = asm_comment..token.." "
		end

		-- Now resolve the tilde-references
		result = result:gsub("~F", _G.fn_name)
		result = result:gsub("~L", _G.filename)
		result = result:gsub("~I", _G.index)

		-- Add the comment and return the final result
		return string.format("\n%s\n%s", asm_comment, result)
	end

	local function emit_from_file (filepath)
		_G.filename = extract_filename(filepath)

		local file = assert(io.open(filepath))
		local buffer = {}

		for line in file:lines() do
			local result  = emit(line)
			if result then buffer[#buffer + 1] = result end
		end

		return table.concat(buffer, "")
	end

	return {
		emit_from_file = emit_from_file
	}
end


local asm_text = metadata().emit_from_file(arg[1])

io.open(extract_filename(arg[1])..".asm", "w"):write(asm_text):close()

--[=[
	-- next ones: goto, label, and if-goto
	["label"] = setmetatable({}, {__index = function (_, arg)
		return string.format("(~F$%s)", arg)
	end}),

	["goto"] = setmetatable({}, {__index = function (_, arg)
		return string.format("@~F$%s 0;JMP", arg)
	end}),

	["if-goto"] = setmetatable({}, {__index = function (_, arg)
		return string.format("@SP M=M-1 A=M D=M @~F$%s D;JNE", arg)
	end}),

	["function"] = setmetatable({}, {__index = function (_, arg)
		local keys = {["~F"] = arg}
		return setmetatable(keys, {__index =

}

return {
	metadata = metadata,
	emit_from_file = function (filepath)
		return metadata[emit_from_file](metadata, filepath)
	end
}
--]=]
