\ Problem 2
\ 
\ Each new term in the Fibonacci sequence is generated by adding the previous two 
\ terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 
\ 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose 
\ values do not exceed four million, find the sum of the even-valued terms.

: fibnext ( a b -- b a+b)
	swap over + ;

\ 0 is the "sum variable", and 1 2 is the start of the given Fibonacci sequence
: main ( --)
	0 1 2 0 0 do
		i 3 mod 0= if
			rot over + -rot \ add to the sum
		then fibnext

		dup 4000000 > if leave then
	loop 2drop ;

: expectdepth ( n --)
	depth 1- <> if
		abort" stack depth doesn't check out"
	then ; 

main 1 expectdepth . \ 4613732

\ Remarks
\ Even-valued Fibonacci numbers occur every third iteration of the loop.
\
\ The loop used is pseudo-infinite on purpose: I needed a loop where the
\ current index need not be worked out with extra stack manipulations.
\
\ The word 'expectdepth' sanity-checks the stack for the expected correct
\ number of entries (usually one).
