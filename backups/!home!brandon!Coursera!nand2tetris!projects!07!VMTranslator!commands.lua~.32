local fixed = require "fixed"
local heap = require "heap"
local arith = require "arith"

local num_branches = 0

local commands = {
	["push"] = {
		-- Commands for fixed segments
		["constant"] = fixed.push("constant"),
		["static"] = fixed.push("static", filename),
		["pointer"] = fixed.push("pointer"),
		["temp"] = fixed.push("temp"),

		-- Commands for heap segments
		["local"] = heap.push("local"),
		["argument"] = heap.push("argument"),
		["this"] = heap.push("this"),
		["that"] = heap.push("that")
	},
	["pop"] = {
		-- Commands for fixed segments
		["static"] = fixed.pop("static", filename),
		["pointer"] = fixed.pop("pointer"),
		["temp"] = fixed.pop("temp"),

		-- Commands for heap segments
		["local"] = heap.pop("local"),
		["argument"] = heap.pop("argument"),
		["this"] = heap.pop("this"),
		["that"] = heap.pop("that")
	},

	-- Arithmetic and logic commands
	["add"] = arith.commands["add"],
	["and"] = arith.commands["and"],
	["or"] = arith.commands["or"],
	["neg"] = arith.commands["neg"],
	["sub"] = arith.commands["sub"],
	["not"] = arith.commands["not"],

	["eq"] = function ()
		local snippet = arith.branch("eq", count)
		count = count + 1

		return snippet
	end,

	["gt"] = function ()
		local snippet = arith.branch("gt", count)
		count = count + 1

		return snippet
	end,

	["lt"] = function ()
		local snippet = arith.branch("lt", count)
		count = count + 1

		return snippet
	end,
}

print(commands["eq"])
print(commands["eq"])
print(commands["eq"])
print(commands["eq"])
--[[
print(commands["eq"])
print(commands["lt"])
print(commands["gt"])
print(commands["gt"])
--]]
