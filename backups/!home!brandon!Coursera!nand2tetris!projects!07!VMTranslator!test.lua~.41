local fixed = require "fixed"
local heap = require "heap"
local arith = require "arith"

local commands = {
	["push"] = {
		-- Commands for fixed segments
		["constant"] = fixed.push("constant"),
		["static"] = fixed.push("static", filename),
		["pointer"] = fixed.push("pointer"),
		["temp"] = fixed.push("temp"),

		-- Commands for heap segments
		["local"] = heap.push("local"),
		["argument"] = heap.push("argument"),
		["this"] = heap.push("this"),
		["that"] = heap.push("that")
	},
	["pop"] = {
		-- Commands for fixed segments
		["static"] = fixed.pop("static", filename),
		["pointer"] = fixed.pop("pointer"),
		["temp"] = fixed.pop("temp"),

		-- Commands for heap segments
		["local"] = heap.pop("local"),
		["argument"] = heap.pop("argument"),
		["this"] = heap.pop("this"),
		["that"] = heap.pop("that")
	},

	-- Arithmetic and logic commands
	["add"] = arith.commands["add"],
	["and"] = arith.commands["and"],
	["or"] = arith.commands["or"],
	["neg"] = arith.commands["neg"],
	["sub"] = arith.commands["sub"],
	["not"] = arith.commands["not"],
	["eq"] = arith.commands["eq"],
	["gt"] = arith.commands["gt"],
	["lt"] = arith.commands["lt"]
}

-- Process a VM file
local file = assert(io.open(arg[1]))
local filename = arg[1]:match("^[^%.]+")

local buffer = {}
for line in file:lines() do
	local t = commands

	for token in line:gmatch("%w+") do
		t = t[token]
	end

	print(t)
end

local out_asm = assert(io.open(filename..".asm", "w"))

file:close()

--print(commands["push"]["constant"]["3"])
--print(commands["pop"]["temp"]["4"])
--print(commands["pop"]["static"]["5"])
--print(commands["pop"]["local"]["3"])
--print(commands["add"])
