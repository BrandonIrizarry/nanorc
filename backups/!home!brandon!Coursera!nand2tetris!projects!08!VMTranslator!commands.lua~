local M = {}

local fixed = require "fixed"
local heap = require "heap"
local arith = require "arith"

function M.init (filename)
	local commands = {
		["push"] = {
			-- Commands for fixed segments
			["constant"] = fixed.push("constant"),
			["static"] = fixed.push("static", filename),
			["pointer"] = fixed.push("pointer"),
			["temp"] = fixed.push("temp"),

			-- Commands for heap segments
			["local"] = heap.push("local"),
			["argument"] = heap.push("argument"),
			["this"] = heap.push("this"),
			["that"] = heap.push("that")
		},
		["pop"] = {
			-- Commands for fixed segments
			["static"] = fixed.pop("static", filename),
			["pointer"] = fixed.pop("pointer"),
			["temp"] = fixed.pop("temp"),

			-- Commands for heap segments
			["local"] = heap.pop("local"),
			["argument"] = heap.pop("argument"),
			["this"] = heap.pop("this"),
			["that"] = heap.pop("that")
		},

		-- Arithmetic and logic commands
		["add"] = arith.commands["add"],
		["and"] = arith.commands["and"],
		["or"] = arith.commands["or"],
		["neg"] = arith.commands["neg"],
		["sub"] = arith.commands["sub"],
		["not"] = arith.commands["not"],
	}

	-- Ensure unique labels in stack comparison-operators
	local count = 0

	-- Comparison commands are deliberately absent from '_commands',
	-- so that they trigger this metatable
	setmetatable(commands, {__index = function (_, cmd)
		local snippet = arith.branch(cmd, count)
		count = count + 1

		return snippet
	end})

	return commands
end

return M
