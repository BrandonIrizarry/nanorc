s" olddefs.fs" included

\ Problem 4a
\ 
\  Rewrite the temperature conversion definitions which you created for the 
\ problems in Chap. 5. This time assume that the input and resulting temperatures 
\ are to be double-length signed integers which are scaled (i.e., multiplied) by 
\ ten. For example, if 10.5 degrees is entered, it is a 32-bit integer with a 
\ value of 105. 

: df>dc ( fahrenheit -- celsius)
	-320. d+ 5 9 m*/ ;

: dc>dk ( celsius -- kelvin)
	2730. d+ ;

: dc>df ( celsius -- fahrenheit)
	9 5 m*/ 32. d+ ;

: dk>dc ( kelvin -- celsius)
	2730. d- ;

: df>dk ( fahrenheit -- kelvin)
	df>dc dc>dk ;

: dk>df ( kelvin -- fahrenheit)
	dk>dc dc>df ;

\ Problem 4b
\ Write a formatted output word named .DEG which will display a double-length 
\ signed integer scaled by ten as a string of digits, a decimal point, and one 
\ fractional digit.
\ 
\ For example:
\
\ 12.3 .DEG↵12.3 ok

: .deg
	tuck dabs <# # [char] . hold #s rot sign #> type cr ;

\ Problem 4c
\
\ Solve the following conversions:
\ 0.0° F in Celsius
\ 212.0° F in Celsius
\ 20.0° F in Celsius
\ 16.0° C in Fahrenheit
\ -40.0° C in Fahrenheit
\ 100.0° K in Celsius
\ 100.0° K in Fahrenheit
\ 233.0° K in Celsius
\ 233.0° K in Fahrenheit

0 f>c .
0.0 df>dc .deg

212 f>c .
212.0 df>dc .deg

20 f>c .
20.0 df>dc .deg

16 c>f .
16.0 dc>df .deg

false [if]
-40 c>f .
-40.0 dc>df .deg

100 k>c . 
100.0 dk>dc .deg

100 k>f .
100.0 dk>df .deg

233 k>c .
233.0 dk>dc .deg

233 k>f .
233.0 dk>df .deg
[then]
